On how I see Nemo would look like
---------------------------------

+ Statements end with either a newline or a semicolon
+ Everything is an expression
+ Comments start with the sign # or as a block, enclosed with /* and */
+ Integers, floats and strings are scalars (Perl-like)
+ Basic functions are actually keywords (additionally, no need for parenthesises)
+ More technically, it would be stack based, Perl-like

# Declaring a variable

    my var

# Initializing a variable

    my var = 6

# Block are enclosed with { and }

# Defining a function

    fn hello {
      print "hello, world!"
    }

  When you pass an argument to the function, it gets pushed onto the stack, and
  then, to get it inside of the function, you have to pop/shift it (Perl-like)

    fn hello {
      my name = pop # or shift, we'll see later
      print "hello, " . name . "\n"
    }

# Ifs

    if <expr><newline unless stmt is a block>
      <stmt>

# Whiles

    while <expr><newline unless stmt is a block>
      <stmt>

# "Everything is an expression"

    my var = if a == 1 { 4 } else { 8 }

